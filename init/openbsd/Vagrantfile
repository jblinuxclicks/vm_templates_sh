
# minimal contents
Vagrant.configure("2") do |config|
  config.vm.provider :libvirt do |libvirt|
    libvirt.driver = 'kvm'
  end
end


# custom contents
# -*- mode: ruby -*-
# vi: set ft=ruby :

variant = 'openbsd'

Vagrant.configure(2) do |config|

  config.ssh.shell = 'sh'
  config.vm.boot_timeout = 1800
  config.vm.synced_folder '.', '/vagrant', disabled: true
  
  config.vm.provider :libvirt do |p, override|
    p.driver = 'kvm'
    p.cpus = 2
    p.memory = 2048
    p.video_vram = 64
    #p.video_type = 'cirrus'
    p.disk_bus = 'virtio'
    p.nic_model_type = 'virtio'
    p.loader = '/usr/share/OVMF/OVMF_CODE.fd'
  end
  
  config.vm.provision 'example', type: 'shell', run: 'never' do |s|
    s.inline = 'echo "Example provisioning ..."'
  end
  
  config.vm.provision 'shell', privileged: false do |s|
    s.inline = <<-EOF
set -x ; sudo rm -r /tmp/init ; sudo rm -r /tmp/scripts
mkdir -p /tmp/init ; sudo chmod -R 1777 /tmp
EOF
  end
  config.vm.provision 'file', source: "#{ENV.fetch('repo_dir', '/mnt/Data0/vm_templates_sh')}/init/common", destination: '/tmp/init/'
  config.vm.provision 'file', source: "#{ENV.fetch('repo_dir', '/mnt/Data0/vm_templates_sh')}/init/#{variant}", destination: '/tmp/init/'
  config.vm.provision 'file', source: "#{ENV.fetch('repo_dir', '/mnt/Data0/vm_templates_sh')}/scripts/#{variant}", destination: '/tmp/'
  config.vm.provision 'file', source: "#{ENV['HOME']}/.ssh/publish_krls", destination: '/tmp/init/common/skel/_ssh/'
  config.vm.provision 'xferscripts', type: 'shell' do |s|
    s.inline = <<-EOF
set -x
for path in /root/init.tar /root/init /root/scripts ; do
  rm -r $path ;
done
mv /tmp/#{variant} /tmp/scripts ; cp -fR /tmp/init /tmp/scripts /root/
EOF
  end
  
  config.vm.provision 'upgradepkgs', type: 'shell', run: 'never' do |s|
    s.env = {'HOME_DIR': '/home/vagrant', 'WITH_X11': 'nox11'}
    s.inline = 'sh /root/scripts/upgradepkgs.sh'
  end

end
